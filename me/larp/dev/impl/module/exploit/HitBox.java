//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\natha\Downloads\Minecraft-Deobfuscator3000-master\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package me.larp.dev.impl.module.exploit;

import net.minecraft.entity.Entity;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import java.util.Iterator;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import me.larp.dev.api.module.Category;
import me.larp.dev.api.setting.Setting;
import me.larp.dev.api.module.Module;

public class HitBox extends Module
{
    private final Setting size;
    
    public HitBox() {
        super("HitBox", "", Category.COMBAT);
        this.addSetting(this.size = new Setting("Size", this, 10, 2, 20));
    }
    
    @SubscribeEvent
    public void onUpdate(final TickEvent.ClientTickEvent event) {
        if (this.mc.world == null || this.mc.player == null) {
            return;
        }
        final Iterator<Object> iterator;
        Object object;
        EntityPlayer player;
        this.mc.world.loadedEntityList.stream().forEach(entity -> {
            if (entity != null || entity != this.mc.player || entity instanceof EntityPlayer) {
                this.mc.world.loadedEntityList.iterator();
                while (iterator.hasNext()) {
                    object = iterator.next();
                    if (object != null && object != this.mc.player && object instanceof EntityPlayer) {
                        player = (EntityPlayer)object;
                        player.setEntityBoundingBox(new AxisAlignedBB(player.posX - this.size.getIntegerValue() / 10.0f, player.getEntityBoundingBox().minY, player.posZ - this.size.getIntegerValue() / 10.0f, player.posX + this.size.getIntegerValue() / 10.0f, player.getEntityBoundingBox().maxY, player.posZ + this.size.getIntegerValue() / 10.0f));
                    }
                }
            }
        });
    }
}
