//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\natha\Downloads\Minecraft-Deobfuscator3000-master\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package me.larp.dev.impl.module.exploit;

import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.block.Block;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayer;
import me.larp.dev.api.util.BlockInteractionHelper;
import me.larp.dev.api.util.LoggerUtil;
import net.minecraft.init.Blocks;
import net.minecraft.util.math.BlockPos;
import me.larp.dev.api.module.Category;
import me.larp.dev.api.setting.Setting;
import net.minecraft.client.Minecraft;
import me.larp.dev.api.module.Module;

public class Burrow extends Module
{
    public static final Minecraft mc;
    Setting rotate;
    Setting silent;
    Setting enderchest;
    Setting height;
    private float oldTickLength;
    
    public Burrow() {
        super("Burrow", "", Category.EXPLOIT);
        this.rotate = new Setting("Head Rotate", this, false);
        this.silent = new Setting("Silent Switch", this, true);
        this.enderchest = new Setting("EnderChest", this, true);
        this.height = new Setting("Fake Jump Height", this, 2, -30, 30);
    }
    
    @Override
    public void enable() {
        if (Burrow.mc.player == null || Burrow.mc.world == null) {
            return;
        }
        final int oldSlot = Burrow.mc.player.inventory.currentItem;
        final BlockPos originalPos = new BlockPos(Burrow.mc.player.posX, Burrow.mc.player.posY, Burrow.mc.player.posZ);
        if (Burrow.mc.world.getBlockState(new BlockPos(Burrow.mc.player.posX, Burrow.mc.player.posY, Burrow.mc.player.posZ)).getBlock().equals(Blocks.OBSIDIAN) || Burrow.mc.world.getBlockState(new BlockPos(Burrow.mc.player.posX, Burrow.mc.player.posY, Burrow.mc.player.posZ)).getBlock().equals(Blocks.ENDER_CHEST)) {
            LoggerUtil.sendMessage("Burrowfag.");
            this.set_disable();
            return;
        }
        if (BlockInteractionHelper.isInterceptedByOther(originalPos)) {
            LoggerUtil.sendMessage("Ur intercepting with another creature :0.");
            this.set_disable();
            return;
        }
        if (getHotbarSlot(Blocks.OBSIDIAN) == -1 && getHotbarSlot(Blocks.ENDER_CHEST) == -1) {
            LoggerUtil.sendMessage("U need echest or obsidian.");
            this.set_disable();
            return;
        }
        if (!Burrow.mc.world.getBlockState(originalPos.add(0, 1, 0)).getBlock().equals(Blocks.AIR) || !Burrow.mc.world.getBlockState(originalPos.add(0, 2, 0)).getBlock().equals(Blocks.AIR) || !Burrow.mc.world.getBlockState(originalPos.add(0, 3, 0)).getBlock().equals(Blocks.AIR)) {
            LoggerUtil.sendMessage("Tight af all up in these boys need some space!");
            this.set_disable();
            return;
        }
        if (Burrow.mc.isSingleplayer()) {
            LoggerUtil.sendMessage("Doesnt work in singeplayer.");
            this.set_disable();
            return;
        }
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 0.41999998688698, Burrow.mc.player.posZ, true));
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 0.7531999805211997, Burrow.mc.player.posZ, true));
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 1.00133597911214, Burrow.mc.player.posZ, true));
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 1.16610926093821, Burrow.mc.player.posZ, true));
        Burrow.mc.player.setPosition(Burrow.mc.player.posX, Burrow.mc.player.posY + 1.16610926093821, Burrow.mc.player.posZ);
        if (this.enderchest.get_value(true) && getHotbarSlot(Blocks.ENDER_CHEST) != -1) {
            Burrow.mc.player.inventory.currentItem = getHotbarSlot(Blocks.ENDER_CHEST);
        }
        else if (getHotbarSlot(Blocks.OBSIDIAN) != -1) {
            Burrow.mc.player.inventory.currentItem = getHotbarSlot(Blocks.OBSIDIAN);
        }
        else {
            Burrow.mc.player.inventory.currentItem = getHotbarSlot(Blocks.ENDER_CHEST);
        }
        BlockInteractionHelper.placeBlock(originalPos, this.rotate.get_value(true), true, false, true, false);
        Burrow.mc.player.inventory.currentItem = oldSlot;
        Burrow.mc.player.setPosition(Burrow.mc.player.posX, Burrow.mc.player.posY - 1.16610926093821, Burrow.mc.player.posZ);
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + this.height.getIntValue(), Burrow.mc.player.posZ, true));
        this.set_disable();
    }
    
    private void set_disable() {
    }
    
    public static int getHotbarSlot(final Block block) {
        for (int i = 0; i < 9; ++i) {
            final Item item = Burrow.mc.player.inventory.getStackInSlot(i).getItem();
            if (item instanceof ItemBlock && ((ItemBlock)item).getBlock().equals(block)) {
                return i;
            }
        }
        return -1;
    }
    
    static {
        mc = Minecraft.getMinecraft();
    }
}
