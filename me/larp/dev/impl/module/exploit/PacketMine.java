//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\natha\Downloads\Minecraft-Deobfuscator3000-master\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package me.larp.dev.impl.module.exploit;

import me.larp.dev.api.util.LoggerUtil;
import net.minecraft.init.Blocks;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import me.larp.dev.api.util.RenderUtil;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.network.Packet;
import java.util.Objects;
import net.minecraft.util.EnumFacing;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumHand;
import net.minecraft.world.World;
import net.minecraftforge.event.entity.player.PlayerInteractEvent;
import me.larp.dev.api.module.Category;
import net.minecraft.util.math.BlockPos;
import me.larp.dev.api.setting.Setting;
import me.larp.dev.api.module.Module;

public class PacketMine extends Module
{
    private final Setting render;
    private int timer;
    private BlockPos renderBlock;
    
    public PacketMine() {
        super("PacketMine", Category.EXPLOIT);
        this.render = new Setting("Render", this, true);
        this.timer = -1;
        this.renderBlock = null;
    }
    
    @SubscribeEvent
    public void onBlockClick(final PlayerInteractEvent.LeftClickBlock event) {
        if (!this.nullCheck() && this.mc.world.getBlockState(event.getPos()).getBlock().getBlockHardness(this.mc.world.getBlockState(event.getPos()), (World)this.mc.world, event.getPos()) != -1.0f) {
            this.mc.player.swingArm(EnumHand.MAIN_HAND);
            this.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getPos(), (EnumFacing)Objects.requireNonNull(event.getFace())));
            this.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getPos(), event.getFace()));
            if (this.renderBlock == null && this.render.getBooleanValue()) {
                this.renderBlock = event.getPos();
            }
        }
    }
    
    @SubscribeEvent
    public void onWorldRender(final RenderWorldLastEvent event) {
        if (!this.nullCheck() && this.renderBlock != null && this.timer > 0) {
            RenderUtil.drawBoxFromBlockpos(this.renderBlock, 0.3f, 0.3f, 0.3f, 0.5f);
        }
    }
    
    @SubscribeEvent
    public void onTick(final TickEvent.ClientTickEvent event) {
        if (!this.nullCheck()) {
            if (this.renderBlock != null && this.mc.world.getBlockState(this.renderBlock).getBlock() == Blocks.AIR) {
                this.renderBlock = null;
            }
            if (this.renderBlock != null && this.timer == -1) {
                this.timer = 130;
            }
            if (this.timer > 0) {
                --this.timer;
            }
            if (this.timer == 0) {
                this.timer = -1;
                this.renderBlock = null;
            }
        }
    }
    
    @Override
    public void onEnable() {
        LoggerUtil.sendMessage("PacketMine ON");
    }
    
    @Override
    public void onDisable() {
        LoggerUtil.sendMessage("PacketMine OFF");
    }
}
