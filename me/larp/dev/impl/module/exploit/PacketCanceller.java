// 
// Decompiled by Procyon v0.5.36
// 

package me.larp.dev.impl.module.exploit;

import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerAbilities;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketInput;
import me.larp.dev.impl.event.PacketEvent;
import me.larp.dev.api.module.Category;
import net.minecraft.network.Packet;
import java.util.ArrayList;
import me.larp.dev.api.setting.Setting;
import me.larp.dev.api.module.Module;

public final class PacketCanceller extends Module
{
    private final Setting CancelCPacketInput;
    private final Setting CancelPosition;
    private final Setting CancelPositionRotation;
    private final Setting CancelRotation;
    private final Setting CancelCPacketPlayerAbilities;
    private final Setting CancelCPacketPlayerDigging;
    private final Setting CancelCPacketPlayerTryUseItem;
    private final Setting CancelCPacketPlayerTryUseItemOnBlock;
    private final Setting CancelCPacketEntityAction;
    private final Setting CancelCPacketUseEntity;
    private final Setting CancelCPacketVehicleMove;
    private int PacketsCanelled;
    private ArrayList<Packet> PacketsToIgnore;
    
    public PacketCanceller() {
        super("PacketCanceller", "", Category.EXPLOIT);
        this.CancelCPacketInput = new Setting("Input", this, false);
        this.CancelPosition = new Setting("Position", this, false);
        this.CancelPositionRotation = new Setting("PositionRotation", this, false);
        this.CancelRotation = new Setting("Rotation", this, false);
        this.CancelCPacketPlayerAbilities = new Setting("PlayerAbilities", this, false);
        this.CancelCPacketPlayerDigging = new Setting("PlayerDigging", this, false);
        this.CancelCPacketPlayerTryUseItem = new Setting("PlayerTryUseItem", this, false);
        this.CancelCPacketPlayerTryUseItemOnBlock = new Setting("PlayerTryUseItemOnBlock", this, false);
        this.CancelCPacketEntityAction = new Setting("EntityAction", this, false);
        this.CancelCPacketUseEntity = new Setting("UseEntity", this, false);
        this.CancelCPacketVehicleMove = new Setting("VehicleMove", this, false);
        this.PacketsCanelled = 0;
        this.PacketsToIgnore = new ArrayList<Packet>();
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        this.PacketsCanelled = 0;
    }
    
    @SubscribeEvent
    public void onPacketSend(final PacketEvent.Send event) {
        if ((!(event.getPacket() instanceof CPacketInput) || !this.CancelCPacketInput.getBooleanValue()) && (!(event.getPacket() instanceof CPacketPlayer.Position) || !this.CancelPosition.getBooleanValue()) && (!(event.getPacket() instanceof CPacketPlayer.PositionRotation) || !this.CancelPositionRotation.getBooleanValue()) && (!(event.getPacket() instanceof CPacketPlayer.Rotation) || !this.CancelRotation.getBooleanValue()) && (!(event.getPacket() instanceof CPacketPlayerAbilities) || !this.CancelCPacketPlayerAbilities.getBooleanValue()) && (!(event.getPacket() instanceof CPacketPlayerDigging) || !this.CancelCPacketPlayerDigging.getBooleanValue()) && (!(event.getPacket() instanceof CPacketPlayerTryUseItem) || !this.CancelCPacketPlayerTryUseItem.getBooleanValue()) && (!(event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock) || !this.CancelCPacketPlayerTryUseItemOnBlock.getBooleanValue()) && (!(event.getPacket() instanceof CPacketEntityAction) || !this.CancelCPacketEntityAction.getBooleanValue()) && (!(event.getPacket() instanceof CPacketUseEntity) || !this.CancelCPacketUseEntity.getBooleanValue()) && (!(event.getPacket() instanceof CPacketVehicleMove) || !this.CancelCPacketVehicleMove.getBooleanValue())) {
            return;
        }
        if (this.PacketsToIgnore.contains(event.getPacket())) {
            this.PacketsToIgnore.remove(event.getPacket());
            return;
        }
        ++this.PacketsCanelled;
        event.setCanceled(true);
    }
    
    public void AddIgnorePacket(final Packet p_Packet) {
        this.PacketsToIgnore.add(p_Packet);
    }
}
